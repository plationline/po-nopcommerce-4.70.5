@model Nop.Plugin.Payments.PlatiOnline.Models.CheckoutCompletedModel
@using Nop.Web.Framework.Infrastructure
@inject INopHtmlHelper NopHtml 
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-checkout-page");
    NopHtml.AppendPageCssClassParts("html-order-completed-page");
}

<div class="page checkout-page order-completed-page">
	@switch (Model.Payment_status)
	{
		case "Authorized":
			<div class="page-title">
				<h1>@T("Checkout.ThankYou")</h1>
			</div>
			<div class="page-body checkout-data">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedTop, additionalData = Model })
				<div class="section order-completed">
					<div class="title">
						<strong>@T("Checkout.YourOrderHasBeenSuccessfullyProcessed")</strong>
					</div>
					<div class="details">
						<div class="order-number">
							<h3>@T("Plugins.Payments.PlatiOnline.Fields.YourTransactionIs"): @T("Plugins.Payments.PlatiOnline.Fields.Authorized")</h3>
						</div>
						<div class="order-number">
							<strong>@T("Checkout.OrderNumber"): @Model.Order_number</strong>
						</div>
						<div class="details-link">
                            <a href="@Url.RouteUrl("OrderDetails", new { orderID = Model.Order_number })">@T("Checkout.PlacedOrderDetails")</a>
						</div>
					</div>
                    <div class="buttons">
                        <input type="button" value="@T("Checkout.ThankYou.Continue")" class="button-1 order-completed-continue-button" onclick="setLocation('@Url.RouteUrl("HomePage")')" />
                    </div>
				</div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedBottom, additionalData = Model })
			</div>
			break;
		case "OnHold":
			<div class="page-title">
				<h1>@T("Checkout.ThankYou")</h1>
			</div>
			<div class="page-body checkout-data">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedTop, additionalData = Model })
				<div class="section order-completed">
					<div class="title">
						<strong>@T("Plugins.Payments.PlatiOnline.Fields.TransactionSecurityReview")</strong>
					</div>
					<div class="details">
						<div class="order-number">
							<h3>@T("Plugins.Payments.PlatiOnline.Fields.YourTransactionIs"): @T("Plugins.Payments.PlatiOnline.Fields.OnHold")</h3>
							@T("Plugins.Payments.PlatiOnline.Fields.TransactionSecurityReviewInfo")
						</div>
						<br />
						<div class="order-number">
							<strong>@T("Checkout.OrderNumber"): @Model.Order_number</strong>
						</div>
						<div class="details-link">
                            <a href="@Url.RouteUrl("OrderDetails", new { orderID = Model.Order_number })">@T("Checkout.PlacedOrderDetails")</a>
						</div>
					</div>
					<div class="buttons">
                        <input type="button" value="@T("Checkout.ThankYou.Continue")" class="button-1 order-completed-continue-button" onclick="setLocation('@Url.RouteUrl("HomePage")')" />
					</div>
				</div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedBottom, additionalData = Model })
			</div>
			break;
		case "Declined":
			<div class="page-title">
				<h1>@T("Plugins.Payments.PlatiOnline.Fields.WeAreSorry")</h1>
			</div>
			<div class="page-body checkout-data">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedTop, additionalData = Model })
				<div class="section order-completed">
					<div class="title">
						<strong>@T("Plugins.Payments.PlatiOnline.Fields.YourOrderHasBeenDeclined")</strong>
					</div>
					<div class="details">
						<div class="order-number">
							<h3>
								@T("Plugins.Payments.PlatiOnline.Fields.YourTransactionIs"): @T("Plugins.Payments.PlatiOnline.Fields.Declined")
							</h3>
							@T("Plugins.Payments.PlatiOnline.Fields.TransactionDeclinedInfo")
						</div>
						<br />
						<div class="order-number">
							<strong>@T("Checkout.OrderNumber"): @Model.Order_number</strong>
						</div>
                        <div class="details-link">
                            <a href="@Url.RouteUrl("OrderDetails", new { orderID = Model.Order_number })">@T("Checkout.PlacedOrderDetails")</a>
                        </div>
					</div>
                    <div class="buttons">
                        <input type="button" value="@T("Checkout.ThankYou.Continue")" class="button-1 order-completed-continue-button" onclick="setLocation('@Url.RouteUrl("HomePage")')" />
                    </div>
				</div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedBottom, additionalData = Model })
			</div>
			break;
		case "Error":
			<div class="page-title">
				<h1>@T("Plugins.Payments.PlatiOnline.Fields.WeAreSorry")</h1>
			</div>
			<div class="page-body checkout-data">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedTop, additionalData = Model })
				<div class="section order-completed">
					<div class="title">
						<strong>@T("Plugins.Payments.PlatiOnline.Fields.TransactionError")</strong>
					</div>
					<div class="details">
						@if (Convert.ToInt32(Model.Order_number) > 0)
						{
						<div class="order-number">
							<h3>@T("Plugins.Payments.PlatiOnline.Fields.TransactionErrorInfo") </h3>
						</div>
						<div class="order-number">
							<strong>@T("Checkout.OrderNumber"): @Model.Order_number</strong>
						</div>
                        <div class="details-link">
                            <a href="@Url.RouteUrl("OrderDetails", new { orderID = Model.Order_number })">@T("Checkout.PlacedOrderDetails")</a>
                        </div>
                        }
                        else
                        {
						<div class="order-number">
							<strong>@Model.Response_reason_text </strong>
						</div>
						}
					</div>
                    <div class="buttons">
                        <input type="button" value="@T("Checkout.ThankYou.Continue")" class="button-1 order-completed-continue-button" onclick="setLocation('@Url.RouteUrl("HomePage")')" />
                    </div>
				</div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedBottom, additionalData = Model })
			</div>
			break;
	}
</div>



